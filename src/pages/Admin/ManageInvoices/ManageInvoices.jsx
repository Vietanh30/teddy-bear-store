import { useState, useEffect } from "react";
import Swal from "sweetalert2";
import Sidebar from "../../../components/SideBar/Sidebar";
import adminApi from "../../../api/AdminApi/adminApi";
import { getAccessTokenFromLS } from "../../../utils/auth";

const BASE_URL = "http://localhost:8000/storage/";

function ManageInvoices() {
    const [orders, setOrders] = useState([]);
    const [loading, setLoading] = useState(true);
    const [selectedOrder, setSelectedOrder] = useState(null);
    const [searchTerm, setSearchTerm] = useState("");
    const [statusFilter, setStatusFilter] = useState("");
    const [dateFrom, setDateFrom] = useState("");
    const [dateTo, setDateTo] = useState("");
    const [editMode, setEditMode] = useState(false);
    const [editFormData, setEditFormData] = useState({
        shipping_name: "",
        shipping_phone: "",
        shipping_address: "",
        payment_method: "",
        notes: "",
    });
    const accessToken = getAccessTokenFromLS();

    useEffect(() => {
        fetchOrders();
    }, []);

    const fetchOrders = async () => {
        setLoading(true);
        try {
            const response = await adminApi.getListOrder(accessToken);
            console.log("üì¢ Fetched Orders:", response);
            if (response.status === 200) {
                setOrders(response.data.orders || []);
            } else {
                setOrders([]);
            }
        } catch (error) {
            console.error("‚ùå L·ªói t·∫£i danh s√°ch ƒë∆°n h√†ng:", error);
            Swal.fire("L·ªói!", "Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë∆°n h√†ng", "error");
        }
        setLoading(false);
    };

    const handleSearch = async () => {
        setLoading(true);
        try {
            const filters = {
                keyword: searchTerm,
                status: statusFilter,
                date_from: dateFrom || null,
                date_to: dateTo || null,
            };

            const response = await adminApi.searchOrders(accessToken, filters);
            if (response.status === 200) {
                setOrders(response.data.orders.data || []);
            } else {
                setOrders([]);
            }
        } catch (error) {
            console.error("‚ùå L·ªói t√¨m ki·∫øm ƒë∆°n h√†ng:", error);
            Swal.fire("L·ªói!", "Kh√¥ng th·ªÉ t√¨m ki·∫øm ƒë∆°n h√†ng", "error");
        }
        setLoading(false);
    };

    const handleResetSearch = () => {
        setSearchTerm("");
        setStatusFilter("");
        setDateFrom("");
        setDateTo("");
        fetchOrders();
    };

    const handleUpdateStatus = async (orderId, newStatus) => {
        try {
            const result = await Swal.fire({
                title: `X√°c nh·∫≠n chuy·ªÉn tr·∫°ng th√°i?`,
                text: `Chuy·ªÉn ƒë∆°n h√†ng sang "${translateStatus(newStatus)}"?`,
                icon: "question",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "X√°c nh·∫≠n",
                cancelButtonText: "H·ªßy b·ªè",
            });

            if (result.isConfirmed) {
                const response = await adminApi.updateOrderStatus(accessToken, orderId, newStatus);
                if (response.status === 200) {
                    Swal.fire("Th√†nh c√¥ng!", "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng!", "success");
                    // C·∫≠p nh·∫≠t l·∫°i danh s√°ch ƒë∆°n h√†ng
                    fetchOrders();
                    // ƒê√≥ng modal chi ti·∫øt n·∫øu ƒëang m·ªü
                    setSelectedOrder(null);
                }
            }
        } catch (error) {
            console.error("‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i:", error);
            Swal.fire(
                "L·ªói!",
                error.response?.data?.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng",
                "error"
            );
        }
    };

    const handleDeleteOrder = async (orderId) => {
        try {
            const result = await Swal.fire({
                title: "X√°c nh·∫≠n x√≥a?",
                text: "B·∫°n s·∫Ω kh√¥ng th·ªÉ kh√¥i ph·ª•c ƒë∆°n h√†ng n√†y!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "X√°c nh·∫≠n x√≥a",
                cancelButtonText: "H·ªßy b·ªè",
            });

            if (result.isConfirmed) {
                const response = await adminApi.deleteOrder(accessToken, orderId);
                if (response.status === 200) {
                    Swal.fire("ƒê√£ x√≥a!", "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.", "success");
                    // C·∫≠p nh·∫≠t l·∫°i danh s√°ch ƒë∆°n h√†ng
                    fetchOrders();
                    // ƒê√≥ng modal chi ti·∫øt n·∫øu ƒëang m·ªü
                    setSelectedOrder(null);
                }
            }
        } catch (error) {
            console.error("‚ùå L·ªói x√≥a ƒë∆°n h√†ng:", error);
            Swal.fire(
                "L·ªói!",
                error.response?.data?.message || "Kh√¥ng th·ªÉ x√≥a ƒë∆°n h√†ng",
                "error"
            );
        }
    };

    const handleEditClick = () => {
        if (selectedOrder) {
            setEditFormData({
                shipping_name: selectedOrder.shipping_name,
                shipping_phone: selectedOrder.shipping_phone,
                shipping_address: selectedOrder.shipping_address,
                payment_method: selectedOrder.payment_method,
                notes: selectedOrder.notes || "",
            });
            setEditMode(true);
        }
    };

    const handleCancelEdit = () => {
        setEditMode(false);
    };

    const handleEditChange = (e) => {
        const { name, value } = e.target;
        setEditFormData((prev) => ({
            ...prev,
            [name]: value,
        }));
    };

    const handleSubmitEdit = async (e) => {
        e.preventDefault();
        try {
            const response = await adminApi.updateOrder(accessToken, selectedOrder.id, editFormData);
            if (response.status === 200) {
                Swal.fire("Th√†nh c√¥ng!", "C·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng th√†nh c√¥ng!", "success");
                setEditMode(false);
                // C·∫≠p nh·∫≠t l·∫°i selected order v√† danh s√°ch ƒë∆°n h√†ng
                const updatedOrderResponse = await adminApi.getOrderDetail(accessToken, selectedOrder.id);
                setSelectedOrder(updatedOrderResponse.data.order);
                fetchOrders();
            }
        } catch (error) {
            console.error("‚ùå L·ªói c·∫≠p nh·∫≠t ƒë∆°n h√†ng:", error);
            Swal.fire(
                "L·ªói!",
                error.response?.data?.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng",
                "error"
            );
        }
    };

    // H√†m chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i th√†nh vƒÉn b·∫£n ti·∫øng Vi·ªát
    const translateStatus = (status) => {
        const translations = {
            pending: "Ch·ªù x√°c nh·∫≠n",
            processing: "ƒêang ch·ªù v·∫≠n chuy·ªÉn",
            shipped: "ƒê√£ v·∫≠n chuy·ªÉn",
            delivered: "ƒê√£ giao th√†nh c√¥ng",
            cancelled: "ƒê√£ h·ªßy",
        };
        return translations[status] || status;
    };

    // H√†m x√°c ƒë·ªãnh tr·∫°ng th√°i ti·∫øp theo c√≥ th·ªÉ chuy·ªÉn ƒë·∫øn
    const getNextPossibleStatuses = (currentStatus) => {
        const validTransitions = {
            pending: ["processing", "cancelled"],
            processing: ["shipped", "cancelled"],
            shipped: ["delivered", "cancelled"],
            delivered: [],
            cancelled: [],
        };
        return validTransitions[currentStatus] || [];
    };

    return (
        <>
            <Sidebar />
            <div className="p-6 sm:ml-60 overflow-x-auto min-h-screen mt-20 bg-gray-100">
                <h2 className="text-2xl font-bold text-[#ff6683] mb-6">Qu·∫£n l√Ω ƒê∆°n H√†ng</h2>

                {/* T√¨m ki·∫øm v√† l·ªçc */}
                <div className="bg-white p-4 rounded-lg shadow mb-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">T√¨m ki·∫øm</label>
                            <input
                                type="text"
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                                placeholder="T√™n, SƒêT, ƒë·ªãa ch·ªâ..."
                                className="w-full p-2 border rounded-md"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Tr·∫°ng th√°i</label>
                            <select
                                value={statusFilter}
                                onChange={(e) => setStatusFilter(e.target.value)}
                                className="w-full p-2 border rounded-md"
                            >
                                <option value="">T·∫•t c·∫£</option>
                                <option value="pending">Ch·ªù x√°c nh·∫≠n</option>
                                <option value="processing">ƒêang ch·ªù v·∫≠n chuy·ªÉn</option>
                                <option value="shipped">ƒê√£ v·∫≠n chuy·ªÉn</option>
                                <option value="delivered">ƒê√£ giao th√†nh c√¥ng</option>
                                <option value="cancelled">ƒê√£ h·ªßy</option>
                            </select>
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">T·ª´ ng√†y</label>
                            <input
                                type="date"
                                value={dateFrom}
                                onChange={(e) => setDateFrom(e.target.value)}
                                className="w-full p-2 border rounded-md"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">ƒê·∫øn ng√†y</label>
                            <input
                                type="date"
                                value={dateTo}
                                onChange={(e) => setDateTo(e.target.value)}
                                className="w-full p-2 border rounded-md"
                            />
                        </div>
                    </div>
                    <div className="flex justify-end gap-2">
                        <button
                            onClick={handleResetSearch}
                            className="bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600 transition"
                        >
                            ƒê·∫∑t l·∫°i
                        </button>
                        <button
                            onClick={handleSearch}
                            className="bg-[#ff6683] text-white px-4 py-2 rounded-md hover:bg-pink-700 transition"
                        >
                            T√¨m ki·∫øm
                        </button>
                    </div>
                </div>

                {loading ? (
                    <p className="text-center text-[#ff6683] text-lg font-semibold">ƒêang t·∫£i danh s√°ch...</p>
                ) : orders.length > 0 ? (
                    <div className="overflow-x-auto">
                        <table className="min-w-full bg-white border border-gray-200 shadow-md rounded-lg">
                            <thead>
                                <tr className="bg-[#ff6683] text-white text-left">
                                    <th className="py-3 px-4 border">STT</th>
                                    <th className="py-3 px-4 border">M√£ ƒê∆°n</th>
                                    <th className="py-3 px-4 border">Kh√°ch H√†ng</th>
                                    <th className="py-3 px-4 border">S·ªë ƒêi·ªán Tho·∫°i</th>
                                    <th className="py-3 px-4 border">T·ªïng Ti·ªÅn</th>
                                    <th className="py-3 px-4 border">Tr·∫°ng Th√°i</th>
                                    <th className="py-3 px-4 border">Thanh To√°n</th>
                                    <th className="py-3 px-4 border">Ng√†y ƒê·∫∑t</th>
                                    <th className="py-3 px-4 border">Thao T√°c</th>
                                </tr>
                            </thead>
                            <tbody>
                                {orders.map((order, index) => (
                                    <tr key={order.id} className="text-center border bg-gray-50 hover:bg-gray-100">
                                        <td className="py-3 px-4">{index + 1}</td>
                                        <td className="py-3 px-4 font-semibold">{order.order_number}</td>
                                        <td className="py-3 px-4">{order.shipping_name}</td>
                                        <td className="py-3 px-4">{order.shipping_phone}</td>
                                        <td className="py-3 px-4 font-semibold">{parseFloat(order.total_amount).toLocaleString()}ƒë</td>
                                        <td className="py-3 px-4 font-bold">
                                            {order.status === "pending" ? (
                                                <span className="text-yellow-500">Ch·ªù x√°c nh·∫≠n</span>
                                            ) : order.status === "processing" ? (
                                                <span className="text-blue-500">ƒêang ch·ªù v·∫≠n chuy·ªÉn</span>
                                            ) : order.status === "shipped" ? (
                                                <span className="text-purple-500">ƒê√£ v·∫≠n chuy·ªÉn</span>
                                            ) : order.status === "delivered" ? (
                                                <span className="text-green-500">ƒê√£ giao th√†nh c√¥ng</span>
                                            ) : (
                                                <span className="text-red-500">ƒê√£ h·ªßy</span>
                                            )}
                                        </td>
                                        <td className="py-3 px-4">
                                            {order.payment_method} -{" "}
                                            {order.payment_status === "pending" ? (
                                                <span className="text-yellow-500 font-semibold">Ch∆∞a thanh to√°n</span>
                                            ) : order.payment_status === "paid" ? (
                                                <span className="text-green-500 font-semibold">ƒê√£ thanh to√°n</span>
                                            ) : (
                                                <span className="text-red-500 font-semibold">ƒê√£ ho√†n ti·ªÅn</span>
                                            )}
                                        </td>
                                        <td className="py-3 px-4">{new Date(order.created_at).toLocaleDateString()}</td>
                                        <td className="py-3 px-4">
                                            <div className="flex justify-center space-x-2">
                                                <button
                                                    onClick={() => setSelectedOrder(order)}
                                                    className="bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-700 transition"
                                                >
                                                    Chi ti·∫øt
                                                </button>
                                                <button
                                                    onClick={() => handleDeleteOrder(order.id)}
                                                    className="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-700 transition"
                                                >
                                                    X√≥a
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                ) : (
                    <p className="text-center text-[#ff6683] text-xl font-semibold mt-6">Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o</p>
                )}
            </div>

            {/* Modal Chi Ti·∫øt ƒê∆°n H√†ng */}
            {selectedOrder && !editMode && (
                <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 mt-10">
                    <div className="bg-white p-6 rounded-lg shadow-lg w-3/4 lg:w-1/2 max-h-[80%] overflow-y-auto ml-32">
                        <div className="flex justify-between items-center mb-4">
                            <h2 className="text-xl font-bold text-[#ff6683]">Chi Ti·∫øt ƒê∆°n H√†ng</h2>
                            <div className="flex gap-2">
                                {/* Button tr·∫°ng th√°i ti·∫øp theo */}
                                {getNextPossibleStatuses(selectedOrder.status).map((nextStatus) => (
                                    <button
                                        key={nextStatus}
                                        onClick={() => handleUpdateStatus(selectedOrder.id, nextStatus)}
                                        className={`px-3 py-1 rounded-md text-white ${nextStatus === "cancelled"
                                            ? "bg-red-500 hover:bg-red-600"
                                            : "bg-green-500 hover:bg-green-600"
                                            }`}
                                    >
                                        {nextStatus === "processing"
                                            ? "X√°c nh·∫≠n ƒë∆°n"
                                            : nextStatus === "shipped"
                                                ? "ƒê√£ v·∫≠n chuy·ªÉn"
                                                : nextStatus === "delivered"
                                                    ? "X√°c nh·∫≠n giao h√†ng"
                                                    : nextStatus === "cancelled"
                                                        ? "H·ªßy ƒë∆°n"
                                                        : translateStatus(nextStatus)}
                                    </button>
                                ))}
                            </div>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                            <div className="bg-gray-50 p-3 rounded border">
                                <h3 className="font-semibold text-lg border-b pb-2 mb-2">Th√¥ng tin ƒë∆°n h√†ng</h3>
                                <p><strong>M√£ ƒë∆°n:</strong> {selectedOrder.order_number}</p>
                                <p><strong>Tr·∫°ng th√°i:</strong> {translateStatus(selectedOrder.status)}</p>
                                <p><strong>Ng√†y ƒë·∫∑t:</strong> {new Date(selectedOrder.created_at).toLocaleString()}</p>
                                <p><strong>T·ªïng ti·ªÅn:</strong> {parseFloat(selectedOrder.total_amount).toLocaleString()}ƒë</p>
                                <p><strong>Ph∆∞∆°ng th·ª©c thanh to√°n:</strong> {selectedOrder.payment_method}</p>
                                <p><strong>Tr·∫°ng th√°i thanh to√°n:</strong> {selectedOrder.payment_status === "pending" ? "Ch∆∞a thanh to√°n" : selectedOrder.payment_status === "paid" ? "ƒê√£ thanh to√°n" : "ƒê√£ ho√†n ti·ªÅn"}</p>
                                {selectedOrder.notes && <p><strong>Ghi ch√∫:</strong> {selectedOrder.notes}</p>}
                            </div>

                            <div className="bg-gray-50 p-3 rounded border">
                                <h3 className="font-semibold text-lg border-b pb-2 mb-2">Th√¥ng tin giao h√†ng</h3>
                                <p><strong>Ng∆∞·ªùi nh·∫≠n:</strong> {selectedOrder.shipping_name}</p>
                                <p><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> {selectedOrder.shipping_phone}</p>
                                <p><strong>ƒê·ªãa ch·ªâ:</strong> {selectedOrder.shipping_address}</p>

                                {/* N√∫t s·ª≠a th√¥ng tin */}
                                <button
                                    onClick={handleEditClick}
                                    className="mt-3 bg-blue-500 text-white px-3 py-1 rounded-md hover:bg-blue-600 transition"
                                >
                                    S·ª≠a th√¥ng tin
                                </button>
                            </div>
                        </div>

                        <h3 className="text-lg font-bold mt-4">Danh s√°ch s·∫£n ph·∫©m:</h3>
                        <ul className="border rounded p-3 bg-gray-100">
                            {selectedOrder.items.map((item) => (
                                <li key={item.id} className="mb-2 border-b pb-2 flex gap-5">
                                    <img
                                        src={`${BASE_URL}${item.variation?.images[0]?.image_path || 'placeholder.jpg'}`}
                                        alt={item.variation?.product?.name || "S·∫£n ph·∫©m"}
                                        className="w-16 h-16 object-cover rounded-md mt-2"
                                        onError={(e) => { e.target.onerror = null; e.target.src = '/placeholder.jpg'; }}
                                    />
                                    <div>
                                        <p><strong>{item.variation?.product?.name || "S·∫£n ph·∫©m kh√¥ng x√°c ƒë·ªãnh"}</strong></p>
                                        <p>SKU: {item.variation?.sku || "N/A"}</p>
                                        <p>S·ªë l∆∞·ª£ng: {item.quantity}</p>
                                        <p>Gi√°: forr</p>

                                        {/* Hi·ªÉn th·ªã danh s√°ch thu·ªôc t√≠nh */}
                                        {item.variation?.attributes && item.variation.attributes.length > 0 && (
                                            <>
                                                <p className="mt-2 font-semibold">Thu·ªôc t√≠nh:</p>
                                                <ul className="text-sm">
                                                    {item.variation.attributes.map((attr) => (
                                                        <li key={attr.id} className="text-gray-600">
                                                            - {attr.attribute_value?.display_value || "N/A"}
                                                        </li>
                                                    ))}
                                                </ul>
                                            </>
                                        )}
                                    </div>
                                </li>
                            ))}
                        </ul>

                        <div className="flex justify-end mt-4">
                            <button
                                onClick={() => setSelectedOrder(null)}
                                className="bg-[#ff6683] text-white px-4 py-2 rounded-md hover:bg-pink-700 transition"
                            >
                                ƒê√≥ng
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* Modal S·ª≠a Th√¥ng Tin ƒê∆°n H√†ng */}
            {selectedOrder && editMode && (
                <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
                    <form
                        onSubmit={handleSubmitEdit}
                        className="bg-white p-6 rounded-lg shadow-lg w-3/4 lg:w-1/2 max-h-[80%] overflow-y-auto ml-32"
                    >
                        <h2 className="text-xl font-bold mb-4 text-[#ff6683]">S·ª≠a Th√¥ng Tin ƒê∆°n H√†ng</h2>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">T√™n ng∆∞·ªùi nh·∫≠n</label>
                                <input
                                    type="text"
                                    name="shipping_name"
                                    value={editFormData.shipping_name}
                                    onChange={handleEditChange}
                                    className="w-full p-2 border rounded-md"
                                    required
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">S·ªë ƒëi·ªán tho·∫°i</label>
                                <input
                                    type="text"
                                    name="shipping_phone"
                                    value={editFormData.shipping_phone}
                                    onChange={handleEditChange}
                                    className="w-full p-2 border rounded-md"
                                    required
                                />
                            </div>
                        </div>

                        <div className="mb-4">
                            <label className="block text-sm font-medium text-gray-700 mb-1">ƒê·ªãa ch·ªâ giao h√†ng</label>
                            <textarea
                                name="shipping_address"
                                value={editFormData.shipping_address}
                                onChange={handleEditChange}
                                className="w-full p-2 border rounded-md"
                                rows="3"
                                required
                            ></textarea>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">Ph∆∞∆°ng th·ª©c thanh to√°n</label>
                                <select
                                    name="payment_method"
                                    value={editFormData.payment_method}
                                    onChange={handleEditChange}
                                    className="w-full p-2 border rounded-md"
                                    required
                                >
                                    <option value="COD">Thanh to√°n khi nh·∫≠n h√†ng (COD)</option>
                                    <option value="Bank Transfer">Chuy·ªÉn kho·∫£n ng√¢n h√†ng</option>
                                    <option value="Momo">V√≠ ƒëi·ªán t·ª≠ Momo</option>
                                    <option value="VNPay">VNPay</option>
                                </select>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">Ghi ch√∫</label>
                                <textarea
                                    name="notes"
                                    value={editFormData.notes}
                                    onChange={handleEditChange}
                                    className="w-full p-2 border rounded-md"
                                    rows="2"
                                ></textarea>
                            </div>
                        </div>

                        <div className="flex justify-end gap-3 mt-6">
                            <button
                                type="button"
                                onClick={handleCancelEdit}
                                className="bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600 transition"
                            >
                                H·ªßy
                            </button>
                            <button
                                type="submit"
                                className="bg-[#ff6683] text-white px-4 py-2 rounded-md hover:bg-pink-700 transition"
                            >
                                L∆∞u thay ƒë·ªïi
                            </button>
                        </div>
                    </form>
                </div>
            )}

            {/* Pagination would go here if needed */}
        </>
    );
}

export default ManageInvoices;